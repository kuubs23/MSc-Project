import sys
sys.path.append('../../..')

import numpy as np
from structsolve import solve
from composites import laminated_plate
from panels import Shell

from panels.plot_shell import plot_shell
from panels.models.clpt_bardell_field import fuvw

import matplotlib.pyplot as plt

from panels.legendre_gauss_quadrature import get_points_weights

def test_nonlinear():
    m = 12
    n = 12
    model = 'plate_clpt_donnell_bardell'
    print('Testing model: %s' % model)
    s = Shell()

    s.model = model
    s.x1u = 0 
    s.x2u = 0

    s.x1v = 0
    s.x2v = 0

    s.x1w = 0
    s.x1wr = 1
    s.x2w = 0
    s.x2wr = 1

    s.y1u = 0
    s.y2u = 0

    s.y1v = 0
    s.y2v = 0

    s.y1w = 0
    s.y1wr = 1
    s.y2w = 0
    s.y2wr = 1

    s.a = 500
    s.b = 250
    s.r = 1.e15
    s.stack = [0, 90, -45, +45, +45, -45, 90, 0]
    s.plyt = 0.125
    E11 = 142.5e3
    E22 = 8.7e3
    G12 = G13 = G23 = 5.1e3
    s.laminaprop = (E11, E22, 0.28, G12, G12, G12)
    s.m = m
    s.n = n
    s.nx = 2*m - 1 # NOTE integration points over x
    s.ny = 2*n - 1 # NOTE integration points over y

    # print(s.nx, s.ny)

    load = 700
    Nxx = load/s.b

    # distributed axial load
    s.add_distr_load_fixed_x(s.a, funcx=lambda y: -Nxx, funcy=None, funcz=None, cte=False)
    # perturbation load
    s.add_point_load(s.a/2., s.b/2., 0, 0, 0.001, cte=True)

    # solving using Modified Newton-Raphson method
    def scaling(vec, D):
        """
            A. Peano and R. Riccioni, Automated discretisatton error
            control in finite element analysis. In Finite Elements m
            the Commercial Enviror&ent (Editei by J. 26.  Robinson),
            pp. 368-387. Robinson & Assoc., Verwood.  England (1978)
        """
        non_nulls = ~np.isclose(D, 0)
        vec = vec[non_nulls]
        D = D[non_nulls]
        return np.sqrt((vec*np.abs(1/D))@vec)

    #initial
    fext = s.calc_fext()

    # print('  fext', fext)   

    # print("fext is ", fext.shape)

    c0 = solve(s.calc_kC(), fext, silent=True)
    plot_mesh, fields = s.uvw(c=c0)
    print('  linear wmax', fields['w'].max())
    # assert np.isclose(fields['w'].max(), 0.0026277, rtol=0.01)

    xis = np.zeros(s.nx, dtype=float)
    weights_xi = np.zeros(s.nx, dtype=float)
    etas = np.zeros(s.ny, dtype=float)
    weights_eta = np.zeros(s.ny, dtype=float)

    get_points_weights(s.nx, xis, weights_xi)
    get_points_weights(s.ny, etas, weights_eta)

    Fnxny = np.zeros((s.nx, s.ny, 6, 6), dtype=float)

    for i in range(s.nx):
        for j in range(s.ny):
            xi = xis[i]
            eta = etas[j]
            xpt = -1 + 2*xi*s.a
            ypt = -1 + 2*eta*s.b
            xpts = np.array([xpt])
            ypts = np.array([ypt])
            u, v, w, phix, phiy = fuvw(c0, s, xpts, ypts)
            for i in range(s.nx):
                for j in range(s.ny):
                    Fnxny[i, j, :, :] = laminated_plate(stack=s.stack, plyts=s.plyts,
                                            laminaprops=s.laminaprops,
                                            rhos=s.rhos,
                                            offset=w).ABD

        
    count = 0
    N = s.get_size()
    fint = s.calc_fint(c=c0, Fnxny=Fnxny)
    Ri = fint - fext
    dc = np.zeros(N)
    ci = c0.copy()
    epsilon = 1.e-3
    KT = s.calc_kT(c=c0, Fnxny=Fnxny)
    D = s.calc_kC(Fnxny=Fnxny).diagonal() # at beginning of load increment

    while True:
        #print('  count', count), 
        dc = solve(KT, -Ri, silent=True)
        c = ci + dc
        fint = np.asarray(s.calc_fint(c=c, Fnxny=Fnxny))
        crisfield_test = scaling(Ri, D)/max(scaling(fext, D), scaling(fint, D))
        #print('    crisfield_test', crisfield_test)
        if crisfield_test < epsilon:
            #print('    converged')
            break
        count += 1
        KT = s.calc_kT(c=c, Fnxny=Fnxny)
        ci = c.copy()
        if count > 1000:
            raise RuntimeError('Not converged!')

    plot_mesh, fields = s.uvw(c=c)
    print('  nonlinear wmax', fields['w'].max())
    assert np.isclose(fields['w'].max(), 0.10794, rtol=0.01)
    plot_shell(s, c, vec='w', title='linear', filename='nonLinear.png')

  
if __name__ == '__main__':
    test_nonlinear()

